// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Script, console2} from "forge-std/Script.sol";
import {Strings} from "openzeppelin-contracts/contracts/utils/Strings.sol";
import {ECDSA} from "solady/utils/ECDSA.sol";

import {PermissionManager} from "../src/PermissionManager.sol";
import {PermissionCallableAllowedContractNativeTokenRecurringAllowance as PermissionContract} from
    "../src/permissions/PermissionCallableAllowedContractNativeTokenRecurringAllowance.sol";

// forge script Debug --broadcast -vvvv
contract Debug is Script {
    /// @dev Deployment address consistent across chains
    ///      https://github.com/coinbase/magic-spend/releases/tag/v1.0.0
    address public constant MAGIC_SPEND = 0x011A61C07DbF256A68256B1cB51A5e246730aB92;
    address public constant OWNER = 0x6EcB18183838265968039955F1E8829480Db5329; // dev wallet
    address public constant COSIGNER = 0xAda9897F517018cc51831B9691F0e94b50df50B8; // tmp private key
    address public constant CDP_PAYMASTER = 0xf5d253B62543C6Ef526309D497f619CeF95aD430;

    // recent deploys
    address public constant MANAGER = 0x384E8b4617886C7070ABd6037c4D5AbeC5B1d14d;

    PermissionManager permissionManager;
    PermissionContract permissionContract;

    function run() public {
        vm.startBroadcast();

        // debugCosignature(userOpHash, userOpCosignature);
        debugBeforeCalls();

        vm.stopBroadcast();
    }

    function debugCosignature() public {
        bytes32 userOpHash = 0x41c969e7044df9a75d8b66d33641885b5eab3a03bb1cda2a6f1be720a40aaf44;
        bytes memory userOpCosignature =
            hex"d72c4bebbf8f8df9e05b5a8454c9a2c80f1391b6ba6f8692828e7b93baeedda87e5ec5229ace02083b44827764ace31fe6b393dcb84da0e257ca58f528683aa81b";
        address userOpCosigner = ECDSA.recover(userOpHash, userOpCosignature);
        logAddress("userOpCosigner", userOpCosigner);
    }

    function debugBeforeCalls() public {
        bytes memory beforeCallsData =
            hex"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ada9897f517018cc51831b9691f0e94b50df50b80000000000000000000000004233130972b43c51e25997cf21b6257a0049cb4c0000000000000000000000000000000000000000000000000000000000014a340000000000000000000000000000000000000000000000000000000066c6f0cf000000000000000000000000000000000000000000000000000000000000010000000000000000000000000008f955bc6665250c8ad546ba225b2352bc6cd1d5000000000000000000000000000000000000000000000000000000000000016000000000000000000000000098549c7a6513c20b66facad469b3d94a3b7b69920000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004085dc1abbbf84ae03c6526396408436b558f6ee4f7ad1ccb59ab92277889fdae2cf772cb4cee4c8639e085b0ebb343d61955b153bb395fc83d0d2d47868040a1b00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000066c59f4f0000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000008af2fa0c32891f1b32a75422ed3c9a8b22951f2f00000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000000000000000000000013d57997c1187dcd0d167796392154d6f311deaf8d0b476a6381cec32899f0ddf69c5728e6fe533a495bc7f505c979146eeeaac9c62937e588de87db169205c98000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000867b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a22324e4c50375145334d324b7733484a454d6b376b705864766448355530726c786a7a36574b437837526373222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303035222c2263726f73734f726967696e223a66616c73657d0000000000000000000000000000000000000000000000000000";
        (PermissionManager.Permission memory permission, address paymaster, address cosigner) =
            abi.decode(beforeCallsData, (PermissionManager.Permission, address, address));

        logAddress("paymaster", paymaster);
        logAddress("cosigner", cosigner);
    }

    function deploy() internal {
        // permissionManager = new PermissionManager{salt: 0}(OWNER, COSIGNER);
        // logAddress("PermissionManager", address(permissionManager));

        // permissionContract = new PermissionContract{salt: 0}(address(permissionManager));
        // logAddress("PermissionCallableAllowedContractNativeTokenRecurringAllowance", address(permissionContract));
    }

    function logAddress(string memory name, address addr) internal pure {
        console2.logString(string.concat(name, ": ", Strings.toHexString(addr)));
    }
}
